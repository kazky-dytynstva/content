import 'dart:convert';
import 'dart:io';

import 'package:migration/add_new_tale/audio_util.dart';
import 'package:migration/migration/from_0_to_1/dto/_new/tale_dto.dart';

void main() {
  final createDateDelta = const Duration(days: 2).inMilliseconds;
  const taleId = 210;
  final missing = _createDirectoriesIfMissing(taleId);
  if (missing) {
    print('directories was created üí™');
    print('now add some images and audio üòò');
    return;
  }

  final crew = _getCrew();
  final content = _getContent(taleId);
  final tags = <String>{
    if (content.first.text != null) Tags.text,
    if (content.first.audio != null) Tags.audio,
    if (crew?.authors?.isNotEmpty == true) Tags.author,
    // Tags.lullaby,
    Tags.poem,
  };

  final tale = TaleDto(
    id: taleId,
    name: '–ó–æ–∑—É–ª—è –π –ø—ñ–≤–µ–Ω—å',
    createDate: DateTime.now().millisecondsSinceEpoch + createDateDelta,
    tags: tags,
    content: content,
    crew: crew,
  );
  final jsonMap = tale.toJson();
  final string = json.encode(jsonMap);
  print(string);
}

TaleCrewDto? _getCrew() => TaleCrewDto(
      authors: [36],
      readers: null,
      musicians: null,
      translators: null,
      graphics: null,
    );

List<TaleChapterDto> _getContent(int taleId) => [
      _createChapter0(taleId),
    ];

TaleChapterDto _createChapter0(int taleId) => TaleChapterDto(
      title: null,
      imageCount: 1,
      text: _getText(),
      audio: _getAudio(taleId: taleId, chapterIndex: 0),
    );

ChapterAudioDto? _getAudio({
  required int taleId,
  required int chapterIndex,
}) {
  return null;
  final path = _getDirPath(taleId) + '$chapterIndex/audio.mp3';
  final data = getAudioData(path);
  return ChapterAudioDto(
    size: data.size,
    duration: data.duration.inMilliseconds,
  );
}

/// return true, if directories are missing
bool _createDirectoriesIfMissing(int taleId) {
  final path = _getDirPath(taleId) + '0/img';
  final dir = Directory(path);
  final missing = !dir.existsSync();
  if (missing) {
    dir.createSync(recursive: true);
  }
  return missing;
}

String _getDirPath(int taleId) => '../data/2/tales/$taleId/';

List<String>? _getText() => [
      "‚Äî –Ø–∫ —Ç–∏ —Å–ø—ñ–≤–∞—î—à, –ü—ñ–≤–Ω–µ, –≤–µ—Å–µ–ª–µ–Ω—å–∫–æ...",
      "‚Äî –ê —Ç–∏, –ó–æ–∑—É–ª–µ–Ω—å–∫–æ, —Ç–∏, –∑—ñ—Ä–æ–Ω—å–∫–æ –º–æ—è,",
      "–í–∏–≤–æ–¥–∏—à –≥–∞—Ä–Ω–æ —Ç–∞–∫ —ñ –∂–∞–ª—ñ–±–Ω–µ–Ω—å–∫–æ,",
      "–©–æ —ñ–Ω–æ–¥—ñ –∞–∂ –ø–ª–∞—á—É —è...",
      "–Ø–∫ —Ç—ñ–ª—å–∫–∏ —â–æ –ø–æ—á–Ω–µ—à —Å–ø—ñ–≤–∞—Ç–∏,",
      "–ù–µ —Ö–æ—á–µ—Ç—å—Å—è –π –ø—à–µ–Ω–∏—á–µ–Ω—å–∫–∏ –∫–ª—é–≤–∞—Ç–∏,-",
      "–ë—ñ–∂–∏—à –≤ —Å–∞–¥–æ–∫ –º–µ—Ä—â—ñ–π...",
      "‚Äî –¢–µ–±–µ —è —Å–ª—É—Ö–∞–ª–∞ –± –¥–æ–≤—ñ–∫—É, –∫—É–º–µ –º—ñ–π,",
      "–ê–±–∏ –± —Ö–æ—Ç—ñ–≤ —Å–ø—ñ–≤–∞—Ç–∏...",
      "‚Äî –ê —Ç–∏, –≥–æ–ª—É–±–æ–Ω—å–∫–æ, —Ç–∏, –∫—Ä–∞–ª–µ—á–∫–æ –º–æ—è,",
      "–ü–æ–∫–∏ —Å–ø—ñ–≤–∞—î—à –Ω–∞ –∫–∞–ª–∏–Ω—ñ,",
      "–¢–æ –π –≤–µ—Å–µ–ª–æ –º–µ–Ω—ñ, —ñ –∑–∞–±—É–≤–∞—é —è",
      "–°–≤–æ—é –Ω–µ–¥–æ–ª–µ–Ω—å–∫—É, –∂–∏—Ç—Ç—è —Å–≤–æ—î –ø–æ–≥–∞–Ω–µ",
      "–¢–∞ –±–µ–∑—Ç–∞–ª–∞–Ω–Ω–µ...",
      "–ê —Ç—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤—á–∏—à",
      "–ê–±–æ –∫—É–¥–∏ –ª–µ—Ç–∏—à,-",
      "–ó–∞–Ω–∏—î —Å–µ—Ä–¥–µ–Ω—å–∫–æ, –Ω–µ–Ω–∞—á–µ –Ω–∞ —á—É–∂–∏–Ω—ñ...",
      "–Ü —ó—Å—Ç–æ–Ω—å–∫–∏ ‚Äî –Ω–µ —ó–º, —ñ –ø–∏—Ç–æ–Ω—å–∫–∏ ‚Äî –Ω–µ –ø'—é",
      "–¢–∞ –≤–∏–≥–ª—è–¥–∞—é –≤—Å–µ –ó–æ–∑—É–ª–µ–Ω—å–∫—É –º–æ—é.",
      "–Ø–∫ –≥–ª—è–Ω—É –Ω–∞ —Ç–µ–±–µ ‚Äî —Ç–∞–∫–∞ —Ç–∏ –Ω–µ–≤–µ–ª–∏—á–∫–∞,",
      "–ú–æ—è –ø–µ—Ä–µ–ø–µ–ª–∏—á–∫–æ,",
      "–ê –≥–æ–ª–æ—Å–æ—á–æ–∫-—Ç–æ —è–∫–∏–π!..",
      "–¢–æ–Ω–µ—Å–µ–Ω—å–∫–∏–π, –º–∏–ª–µ—Å–µ–Ω—å–∫–∏–π —Ç–∞–∫–∏–π...",
      "–ö—É–¥–∏ —Ç–æ–π —Å–æ–ª–æ–≤–µ–π –≥–æ–¥–∏—Ç—å—Å—è?",
      "‚Äî –°–ø–∞—Å–∏–±—ñ, –±—Ä–∞—Ç–∏–∫—É, –∑–∞ –¥–æ–±—Ä–µ—î —Å–ª—ñ–≤—Ü–µ.",
      "–Ø–∫ –Ω–µ –∫–æ—Ö–∞—Ç—å —Ç–µ–±–µ –∑–∞ —Ü–µ?..",
      "–Ü —Ç–∏ –≤–∏—Å–ø—ñ–≤—É—î—à, –Ω–µ–Ω–∞—á–µ —Ç–∞ –∂–∞—Ä-–ø—Ç–∏—Ü—è;",
      "–Ü –¥–∞–ª–µ–±—ñ, —â–æ —Ç–∞–∫,‚Äî –ø–æ—à–ª—é—Å—è —è –Ω–∞ –≤—Å—ñ—Ö.-",
      "–î–µ –≤–∑—è–≤—Å—è –ì–æ—Ä–æ–±–µ—Ü—å, –ø—ñ–¥—Å–ª—É—Ö–∞–≤ —Ç—Ä–æ—Ö–∏ —ó—Ö",
      "–¢–∞ –π –∫–∞–∂–µ: ‚Äî –ì–æ–¥—ñ –≤–∞–º –±—Ä–µ—Ö–∞—Ç–∏",
      "–¢–∞ –æ–¥–Ω–æ –¥—Ä—É–≥–æ–≥–æ –∑–Ω—ñ—á–µ–≤'—è –≤–∏—Ö–≤–∞–ª—è—Ç–∏! ‚Äî",
      "–ü—É—Ä—Ö–Ω—É–≤ ‚Äî —Ç–∞ –π –±—É–≤ —Ç–∞–∫–∏–π.",
      " ",
      "–ó–∞ —â–æ –∂,‚Äî —Ö—Ç–æ-–Ω–µ–±—É–¥—å –ø–æ–ø–∏—Ç–∞—î,-",
      "–ó–æ–∑—É–ª—è –ü—ñ–≤–Ω—è –≤–∏—Ö–≤–∞–ª—è—î?",
      "–ó–∞ —Ç–µ, —â–æ –ü—ñ–≤–µ–Ω—å –≥–æ–¥–∏—Ç—å —ó–π",
      "–¢–∞ –ø–æ—Ç–∞–∫–∞—Ç–∏ –¥–æ–±—Ä–µ –≤–º—ñ—î:",
      "–†—É–∫–∞, —è–∫ –∫–∞–∂—É—Ç—å, —Ä—É–∫—É –º–∏—î.",
    ];

class Tags {
  Tags._();

  static const String text = 'text';
  static const String author = 'author';
  static const String audio = 'audio';
  static const String poem = 'poem';
  static const String lullaby = 'lullaby';
}
