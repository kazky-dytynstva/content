import 'dart:io';
import 'dart:math';

import 'package:migration/migration/from_0_to_1/dto/_new/person/person_dto.dart';
import 'package:migration/migration/from_0_to_1/dto/_new/tale/chapter/audio/dto.dart';
import 'package:migration/migration/from_0_to_1/dto/_new/tale/chapter/dto.dart';
import 'package:migration/migration/from_0_to_1/dto/_new/tale/crew/dto.dart';
import 'package:migration/migration/from_0_to_1/dto/_new/tale/dto.dart';
import 'package:migration/utils/audio_util.dart';
import 'package:migration/utils/tale_tags.dart';
import 'package:migration/utils/to_json.dart';

import '../base_migration.dart';

class From2to2 extends BaseDataMigration {
  @override
  int get appBuildNumberOld => 149;

  @override
  String get appVersionOld => '5.0.0';

  @override
  int get dataVersionOld => 2;

  @override
  int get dataVersionNew => 2;

  @override
  bool get canCleanNewDirectory => false;

  @override
  Future<bool> migrate() async {
    final addPersonOk = true ?? (await _AddPersonHelper(this).run());
    final addTaleOk = true ?? await _AddTaleHelper(this).run();
    return addPersonOk && addTaleOk;
  }
}

abstract class _AddHelper {
  final From2to2 migration;

  final String addItemName;
  final String folderName;

  late int nextId;

  _AddHelper(this.migration, this.addItemName, this.folderName);

  final List<ToJson> originalList = [];

  String get dataPath => '${migration.dataPathOld}/$folderName';

  String get jsonPath => '$dataPath/list.json';

  Future<bool> run() async {
    migration.log('Add new $addItemName started ‚è±');
    migration.log('   - pre validation started');
    assert(await validate());
    migration.log('   - pre validation done');
    await add();
    migration.log('   - add item - done');
    migration.log('   - post validation started');
    final addOk = await validate(post: true);
    if (addOk) {
      migration.log('   - post validation done');
      migration.log('New $addItemName was added successfully ‚òëÔ∏è');
    } else {
      migration.log('   - post validation failed');
      await revert();
      migration.log('   - changes reverted');
      migration.log('New $addItemName was NOT added successfully üõëÔ∏è');
    }
    return addOk;
  }

  Future<void> add();

  Future<bool> validate({bool post = false});

  Future<void> revert() async {
    await saveJson(originalList);
  }

  Future<void> saveJson(List<ToJson> list) async {
    list.sort((a, b) => b.id.compareTo(a.id));
    final json = list.map((e) => e.toJson()).toList();
    await migration.saveJsonListToFile(data: json, filePath: jsonPath);
  }
}

class _AddPersonHelper extends _AddHelper {
  _AddPersonHelper(From2to2 migration) : super(migration, 'Person', 'people');

  @override
  Future<bool> validate({
    bool post = false,
  }) async {
    try {
      final all = await _getAll();

      final idList = all.map((e) => e.id).toSet();
      final nameList = all.map((e) => e.name).toSet();

      assert(
        idList.length == nameList.length,
        'Looks like we have duplicate',
      );

      if (post) {
        final path = '$dataPath/img/$nextId.jpg';
        final file = File(path);
        assert(
          file.existsSync(),
          'Image for the person was not found',
        );
      }
      return true;
    } catch (e) {
      migration.log(e.toString());
      return false;
    }
  }

  @override
  Future<void> add() async {
    nextId = (await _getLastId()) + 1;

    final person = PersonDto(
      id: nextId,
      name: '–ù—ñ–∫–∞ –ë–∞–ª–∞–∂',
      info:
          '–Ü–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∏—Ç—è—á–æ–≥–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–Ω–Ω—è ¬´–ü–µ—Ä—à–∏–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∂—É—Ä–Ω–∞–ª –¥–ª—è –¥—ñ—Ç–µ–π –ß–∞—Ä—ñ–≤–Ω–∏–π –ª—ñ—Ö—Ç–∞—Ä–∏–∫¬ª',
    );
    final allPeople = await _getAll();
    allPeople.add(person);
    await saveJson(allPeople);
  }

  Future<List<PersonDto>> _getAll() async {
    final json = await migration.readJsonList(jsonPath);
    final people = json.map((e) => PersonDto.fromJson(e)).toList();
    if (originalList.isEmpty) {
      originalList.addAll(people);
    }
    return people;
  }

  Future<int> _getLastId() async {
    final people = (await _getAll()).map((e) => e.id);
    return people.reduce(max);
  }
}

class _AddTaleHelper extends _AddHelper {
  _AddTaleHelper(From2to2 migration) : super(migration, 'Tale', 'tales');

  late TaleDto tale;

  String getTalePath(int chapterIndex) => '$dataPath/$nextId/$chapterIndex/';

  @override
  Future<bool> validate({bool post = false}) async {
    try {
      final all = await _getAll();

      final idList = all.map((e) => e.id).toSet();
      final nameList = all.map((e) => e.name).toSet();

      assert(
        idList.length == nameList.length,
        'Looks like we have duplicate',
      );

      if (post) {
        final chapterIndex = 0;
        final path = getTalePath(chapterIndex);
        final dir = Directory(path + 'img');
        if (!dir.existsSync()) {
          dir.createSync(recursive: true);
          migration.log('Empty folder for tale was created');
          throw Exception('Please add some content to the tale folder');
        }

        final imageFile = File(path + 'img/0.jpg');
        assert(
          imageFile.existsSync(),
          'Image for the tale was not found',
        );

        if (tale.tags.contains(Tags.audio)) {
          final audioFile = File(path + 'audio.mp3');
          assert(
            audioFile.existsSync(),
            'Image for the tale was not found',
          );
        }
      }
      return true;
    } catch (e) {
      migration.log(e.toString());
      return false;
    }
  }

  Future<List<TaleDto>> _getAll() async {
    final json = await migration.readJsonList(jsonPath);
    final people = json.map((e) => TaleDto.fromJson(e)).toList();
    if (originalList.isEmpty) {
      originalList.addAll(people);
    }
    return people;
  }

  Future<int> _getLastId() async {
    final people = (await _getAll()).map((e) => e.id);
    return people.reduce(max);
  }

  @override
  Future<void> add() async {
    final createDateDelta = const Duration(days: 1).inMilliseconds;
    nextId = (await _getLastId()) + 1;

    final crew = _getCrew();

    final content = _getContent();
    final tags = <String>{
      if (content.first.text != null) Tags.text,
      if (content.first.audio != null) Tags.audio,
      if (crew?.authors?.isNotEmpty == true) Tags.author,
      // Tags.lullaby,
      Tags.poem,
    };

    tale = TaleDto(
      id: nextId,
      name: '–ó–æ–∑—É–ª—è –π –ø—ñ–≤–µ–Ω—å',
      createDate: DateTime.now().millisecondsSinceEpoch + createDateDelta,
      tags: tags,
      content: content,
      crew: crew,
    );

    final all = await _getAll();
    all.add(tale);
    await saveJson(all);
  }

  TaleCrewDto? _getCrew() => TaleCrewDto(
        authors: [36],
        readers: null,
        musicians: null,
        translators: null,
        graphics: null,
      );

  List<TaleChapterDto> _getContent() => [
        _createChapter0(),
      ];

  TaleChapterDto _createChapter0() => TaleChapterDto(
        title: null,
        imageCount: 1,
        text: _getText(),
        audio: _getAudio(chapterIndex: 0),
      );

  ChapterAudioDto? _getAudio({
    required int chapterIndex,
  }) {
    return null;
    final path = getTalePath(chapterIndex) + 'audio.mp3';
    final data = getAudioData(path);
    return ChapterAudioDto(
      size: data.size,
      duration: data.duration.inMilliseconds,
    );
  }

  List<String>? _getText() => [
        "‚Äî –Ø–∫ —Ç–∏ —Å–ø—ñ–≤–∞—î—à, –ü—ñ–≤–Ω–µ, –≤–µ—Å–µ–ª–µ–Ω—å–∫–æ...",
        "‚Äî –ê —Ç–∏, –ó–æ–∑—É–ª–µ–Ω—å–∫–æ, —Ç–∏, –∑—ñ—Ä–æ–Ω—å–∫–æ –º–æ—è,",
        "–í–∏–≤–æ–¥–∏—à –≥–∞—Ä–Ω–æ —Ç–∞–∫ —ñ –∂–∞–ª—ñ–±–Ω–µ–Ω—å–∫–æ,",
        "–©–æ —ñ–Ω–æ–¥—ñ –∞–∂ –ø–ª–∞—á—É —è...",
        "–Ø–∫ —Ç—ñ–ª—å–∫–∏ —â–æ –ø–æ—á–Ω–µ—à —Å–ø—ñ–≤–∞—Ç–∏,",
        "–ù–µ —Ö–æ—á–µ—Ç—å—Å—è –π –ø—à–µ–Ω–∏—á–µ–Ω—å–∫–∏ –∫–ª—é–≤–∞—Ç–∏,-",
        "–ë—ñ–∂–∏—à –≤ —Å–∞–¥–æ–∫ –º–µ—Ä—â—ñ–π...",
        "‚Äî –¢–µ–±–µ —è —Å–ª—É—Ö–∞–ª–∞ –± –¥–æ–≤—ñ–∫—É, –∫—É–º–µ –º—ñ–π,",
        "–ê–±–∏ –± —Ö–æ—Ç—ñ–≤ —Å–ø—ñ–≤–∞—Ç–∏...",
        "‚Äî –ê —Ç–∏, –≥–æ–ª—É–±–æ–Ω—å–∫–æ, —Ç–∏, –∫—Ä–∞–ª–µ—á–∫–æ –º–æ—è,",
        "–ü–æ–∫–∏ —Å–ø—ñ–≤–∞—î—à –Ω–∞ –∫–∞–ª–∏–Ω—ñ,",
        "–¢–æ –π –≤–µ—Å–µ–ª–æ –º–µ–Ω—ñ, —ñ –∑–∞–±—É–≤–∞—é —è",
        "–°–≤–æ—é –Ω–µ–¥–æ–ª–µ–Ω—å–∫—É, –∂–∏—Ç—Ç—è —Å–≤–æ—î –ø–æ–≥–∞–Ω–µ",
        "–¢–∞ –±–µ–∑—Ç–∞–ª–∞–Ω–Ω–µ...",
        "–ê —Ç—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤—á–∏—à",
        "–ê–±–æ –∫—É–¥–∏ –ª–µ—Ç–∏—à,-",
        "–ó–∞–Ω–∏—î —Å–µ—Ä–¥–µ–Ω—å–∫–æ, –Ω–µ–Ω–∞—á–µ –Ω–∞ —á—É–∂–∏–Ω—ñ...",
        "–Ü —ó—Å—Ç–æ–Ω—å–∫–∏ ‚Äî –Ω–µ —ó–º, —ñ –ø–∏—Ç–æ–Ω—å–∫–∏ ‚Äî –Ω–µ –ø'—é",
        "–¢–∞ –≤–∏–≥–ª—è–¥–∞—é –≤—Å–µ –ó–æ–∑—É–ª–µ–Ω—å–∫—É –º–æ—é.",
        "–Ø–∫ –≥–ª—è–Ω—É –Ω–∞ —Ç–µ–±–µ ‚Äî —Ç–∞–∫–∞ —Ç–∏ –Ω–µ–≤–µ–ª–∏—á–∫–∞,",
        "–ú–æ—è –ø–µ—Ä–µ–ø–µ–ª–∏—á–∫–æ,",
        "–ê –≥–æ–ª–æ—Å–æ—á–æ–∫-—Ç–æ —è–∫–∏–π!..",
        "–¢–æ–Ω–µ—Å–µ–Ω—å–∫–∏–π, –º–∏–ª–µ—Å–µ–Ω—å–∫–∏–π —Ç–∞–∫–∏–π...",
        "–ö—É–¥–∏ —Ç–æ–π —Å–æ–ª–æ–≤–µ–π –≥–æ–¥–∏—Ç—å—Å—è?",
        "‚Äî –°–ø–∞—Å–∏–±—ñ, –±—Ä–∞—Ç–∏–∫—É, –∑–∞ –¥–æ–±—Ä–µ—î —Å–ª—ñ–≤—Ü–µ.",
        "–Ø–∫ –Ω–µ –∫–æ—Ö–∞—Ç—å —Ç–µ–±–µ –∑–∞ —Ü–µ?..",
        "–Ü —Ç–∏ –≤–∏—Å–ø—ñ–≤—É—î—à, –Ω–µ–Ω–∞—á–µ —Ç–∞ –∂–∞—Ä-–ø—Ç–∏—Ü—è;",
        "–Ü –¥–∞–ª–µ–±—ñ, —â–æ —Ç–∞–∫,‚Äî –ø–æ—à–ª—é—Å—è —è –Ω–∞ –≤—Å—ñ—Ö.-",
        "–î–µ –≤–∑—è–≤—Å—è –ì–æ—Ä–æ–±–µ—Ü—å, –ø—ñ–¥—Å–ª—É—Ö–∞–≤ —Ç—Ä–æ—Ö–∏ —ó—Ö",
        "–¢–∞ –π –∫–∞–∂–µ: ‚Äî –ì–æ–¥—ñ –≤–∞–º –±—Ä–µ—Ö–∞—Ç–∏",
        "–¢–∞ –æ–¥–Ω–æ –¥—Ä—É–≥–æ–≥–æ –∑–Ω—ñ—á–µ–≤'—è –≤–∏—Ö–≤–∞–ª—è—Ç–∏! ‚Äî",
        "–ü—É—Ä—Ö–Ω—É–≤ ‚Äî —Ç–∞ –π –±—É–≤ —Ç–∞–∫–∏–π.",
        " ",
        "–ó–∞ —â–æ –∂,‚Äî —Ö—Ç–æ-–Ω–µ–±—É–¥—å –ø–æ–ø–∏—Ç–∞—î,-",
        "–ó–æ–∑—É–ª—è –ü—ñ–≤–Ω—è –≤–∏—Ö–≤–∞–ª—è—î?",
        "–ó–∞ —Ç–µ, —â–æ –ü—ñ–≤–µ–Ω—å –≥–æ–¥–∏—Ç—å —ó–π",
        "–¢–∞ –ø–æ—Ç–∞–∫–∞—Ç–∏ –¥–æ–±—Ä–µ –≤–º—ñ—î:",
        "–†—É–∫–∞, —è–∫ –∫–∞–∂—É—Ç—å, —Ä—É–∫—É –º–∏—î.",
      ];
}
